#include<bits/stdc++.h>
using namespace std;


void Takeinput()
{
       #ifndef ONLINE_JUDGE
       freopen("input.txt","r",stdin);
       freopen("output.txt","w",stdout);
       #endif
}

// stl library all the topics declaring:
/* Stl contains 1) Algorithms 2) Containers 3)Functions 4)Iterators

1. Algorithms:

i)Sorting:
ii)Searching
iii)ALgorithms

#include <algorithm>
#include <iostream>
#include<vector>
#include<numeric> //for accouulate operation
using namespace std;

 */

int main(){

       Takeinput();

     int arr[] = {1,3,5,6,7,6,6};
     int size = sizeof(arr)/sizeof(arr[0]);
      
       sort(begin(arr),end(arr));

       for(int i: arr) cout<<i<<" ";

      // ---------------------
       
       sort(arr,arr+size);

       sort(begin(arr),end(arr));

       for(int i: arr) cout<<i<<" "<<"\n";

      /* Time Complexity: O(nlogn)
       Auxilary Space : O(1)*/

//1 3 5 6 7
   //======================================
       if(binary_search(arr,arr+size,3))
              cout<<"Element Found"<<"\n";
       else
              cout<<"Element Not Found";

//Element Found
       /* Time Complexity: O(logn)
       Auxilary Space : O(1)*/
//====================================
/*Algorithms on vectors:*/

     vector<int> v(arr,arr+size);
     // here vector which contains the elements from the array
    

    //NON-Manipulating Algorithms

     //Ascending sorting
     sort(v.begin(),v.end());

     //for(auto it:v)cout<<it<<" ";  

     //Desecnding Sorting
     sort(v.begin(),v.end(),greater<int>());

     //reverse 
     reverse(v.begin(),v.end());

     //maximum elment
     cout<<*max_element(v.begin(),v.end())<<"\n";
    
    //minimum element
     cout<<*min_element(v.begin(),v.end())<<"\n";

     //start the summation from 0
     cout<<accumulate(v.begin(),v.end(),0)<<"\n";

     //counting the occurance of 3
     cout<<count(v.begin(),v.end(),3)<<"\n";

     //find() returns iterator to last address if element not found
     find(v.begin(),v.end(),5)!=v.end()?
     cout<<"1":
     cout<<"0";

     //first occurance of 5 index value
     auto k=lower_bound(v.begin(),v.end(),5);
     cout<<k-v.begin()<<"\n";


//Manipulating Algorithms 

     //erasing of the value in vector
     v.erase(find(v.begin(),v.end(),1));

     v.erase(unique(v.begin(),v.end()),v.end());
     for(auto it:v)cout<<it<<" ";
       cout<<"\n";

       next_permutation(v.begin(),v.end());
       for(auto it:v)cout<<it<<" ";
          cout<<"\n";
       prev_permutation(v.begin(),v.end());
       for(auto it:v)cout<<it<<" ";
          cout<<"\n"; 
}
